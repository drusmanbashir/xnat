FUNCTION  <SNR>13_SynSet()
    Defined: /usr/local/share/nvim/runtime/syntax/synload.vim:26
Called 1 time
Total time:   0.001670
 Self time:   0.001670

count  total (s)   self (s)
                              " clear syntax for :set syntax=OFF  and any syntax name that doesn't exist
    1              0.000003   syn clear
    1              0.000002   if exists("b:current_syntax")
                                unlet b:current_syntax
    1              0.000001   endif
                            
    1              0.000003   0verbose let s = expand("<amatch>")
    1              0.000001   if s == "ON"
                                " :set syntax=ON
                                if &filetype == ""
                                  echohl ErrorMsg
                                  echo "filetype unknown"
                                  echohl None
                                endif
                                let s = &filetype
    1              0.000001   elseif s == "OFF"
                                let s = ""
    1              0.000001   endif
                            
    1              0.000001   if s != ""
                                " Load the syntax file(s).  When there are several, separated by dots,
                                " load each in sequence.  Skip empty entries.
    2              0.000006     for name in split(s, '\.')
    1              0.000002       if !empty(name)
    1              0.000900         exe "runtime! syntax/" . name . ".vim syntax/" . name . "/*.vim"
    1              0.000731         exe "runtime! syntax/" . name . ".lua syntax/" . name . "/*.lua"
    1              0.000001       endif
    2              0.000001     endfor
    1              0.000001   endif

FUNCTION  provider#clipboard#Call()
    Defined: /usr/local/share/nvim/runtime/autoload/provider/clipboard.vim:241
Called 5 times
Total time:   0.019556
 Self time:   0.000197

count  total (s)   self (s)
    5              0.000035   if get(s:, 'here', v:false)  " Clipboard provider must not recurse. #7184
                                return 0
    5              0.000004   endif
    5              0.000018   let s:here = v:true
    5              0.000005   try
    5   0.019440   0.000080     return call(s:clipboard[a:method],a:args,s:clipboard)
    5              0.000006   finally
    5              0.000011     let s:here = v:false
    5              0.000010   endtry

FUNCTION  <SNR>39_dopopd()
    Defined: ~/.local/share/nvim/site/pack/packer/start/fzf/plugin/fzf.vim:599
Called 2 times
Total time:   0.000012
 Self time:   0.000012

count  total (s)   self (s)
    2              0.000008   if !exists('w:fzf_pushd')
    2              0.000002     return
                              endif
                            
                              " FIXME: We temporarily change the working directory to 'dir' entry
                              " of options dictionary (set to the current working directory if not given)
                              " before running fzf.
                              "
                              " e.g. call fzf#run({'dir': '/tmp', 'source': 'ls', 'sink': 'e'})
                              "
                              " After processing the sink function, we have to restore the current working
                              " directory. But doing so may not be desirable if the function changed the
                              " working directory on purpose.
                              "
                              " So how can we tell if we should do it or not? A simple heuristic we use
                              " here is that we change directory only if the current working directory
                              " matches 'dir' entry. However, it is possible that the sink function did
                              " change the directory to 'dir'. In that case, the user will have an
                              " unexpected result.
                              if s:fzf_getcwd() ==# w:fzf_pushd.dir && (!&autochdir || w:fzf_pushd.bufname ==# bufname(''))
                                execute w:fzf_pushd.command s:escape(w:fzf_pushd.origin)
                              endif
                              unlet! w:fzf_pushd

FUNCTION  <SNR>1_LoadFTPlugin()
    Defined: /usr/local/share/nvim/runtime/ftplugin.vim:14
Called 1 time
Total time:   0.003072
 Self time:   0.003072

count  total (s)   self (s)
    1              0.000007     if exists("b:undo_ftplugin")
                                  exe b:undo_ftplugin
                                  unlet! b:undo_ftplugin b:did_ftplugin
    1              0.000001     endif
                            
    1              0.000005     let s = expand("<amatch>")
    1              0.000002     if s != ""
    1              0.000012       if &cpo =~# "S" && exists("b:did_ftplugin")
                            	" In compatible mode options are reset to the global values, need to
                            	" set the local values also when a plugin was already used.
                            	unlet b:did_ftplugin
    1              0.000000       endif
                            
                                  " When there is a dot it is used to separate filetype names.  Thus for
                                  " "aaa.bbb" load "aaa" and then "bbb".
    2              0.000008       for name in split(s, '\.')
                                    " Load Lua ftplugins after Vim ftplugins _per directory_
                                    " TODO(clason): use nvim__get_runtime when supports globs and modeline
    1              0.000572         exe printf('runtime! ftplugin/%s.vim ftplugin/%s.lua', name, name)
    1              0.001483         exe printf('runtime! ftplugin/%s_*.vim ftplugin/%s_*.lua', name, name)
    1              0.000965         exe printf('runtime! ftplugin/%s/*.vim ftplugin/%s/*.lua', name, name)
    2              0.000002       endfor
    1              0.000001     endif

FUNCTION  27()
    Defined: /usr/local/share/nvim/runtime/autoload/provider/clipboard.vim:182
Called 5 times
Total time:   0.019359
 Self time:   0.019359

count  total (s)   self (s)
    5              0.000010   if a:reg == '"'
                                call s:clipboard.set(a:lines,a:regtype,'+')
                                if s:copy['*'] != s:copy['+']
                                  call s:clipboard.set(a:lines,a:regtype,'*')
                                end
                                return 0
    5              0.000002   end
                            
    5              0.000019   if type(s:copy[a:reg]) == v:t_func
                                call s:copy[a:reg](a:lines, a:regtype)
                                return 0
    5              0.000002   end
                            
    5              0.000005   if s:cache_enabled == 0
                                call s:try_cmd(s:copy[a:reg], a:lines)
                                "Cache it anyway we can compare it later to get regtype of the yank
                                let s:selections[a:reg] = copy(s:selection)
                                let s:selections[a:reg].data = [a:lines, a:regtype]
                                return 0
    5              0.000002   end
                            
    5              0.000012   if s:selections[a:reg].owner > 0
    4              0.000008     let prev_job = s:selections[a:reg].owner
    5              0.000002   end
    5              0.000027   let s:selections[a:reg] = copy(s:selection)
    5              0.000009   let selection = s:selections[a:reg]
    5              0.000010   let selection.data = [a:lines, a:regtype]
    5              0.000009   let selection.argv = s:copy[a:reg]
    5              0.000008   let selection.detach = s:cache_enabled
    5              0.000007   let selection.cwd = "/"
    5              0.018867   let jobid = jobstart(selection.argv, selection)
    5              0.000019   if jobid > 0
    5              0.000049     call jobsend(jobid, a:lines)
    5              0.000014     call jobclose(jobid, 'stdin')
                                " xclip does not close stdout when receiving input via stdin
    5              0.000012     if selection.argv[0] ==# 'xclip'
                                  call jobclose(jobid, 'stdout')
    5              0.000004     endif
    5              0.000011     let selection.owner = jobid
    5              0.000006     let ret = 1
                              else
                                echohl WarningMsg
                                echomsg 'clipboard: failed to execute: '.(s:copy[a:reg])
                                echohl None
                                let ret = 1
    5              0.000003   endif
                            
                              " The previous provider instance should exit when the new one takes
                              " ownership, but kill it to be sure we don't fill up the job table.
    5              0.000011   if exists('prev_job')
    4              0.000048     call timer_start(1000, {... -> jobwait([prev_job], 0)[0] == -1 && jobstop(prev_job)})
    5              0.000003   endif
                            
    5              0.000010   return ret

FUNCTION  <SNR>2_LoadIndent()
    Defined: /usr/local/share/nvim/runtime/indent.vim:13
Called 1 time
Total time:   0.000539
 Self time:   0.000539

count  total (s)   self (s)
    1              0.000002     if exists("b:undo_indent")
                                  exe b:undo_indent
                                  unlet! b:undo_indent b:did_indent
    1              0.000000     endif
    1              0.000002     let s = expand("<amatch>")
    1              0.000001     if s != ""
    1              0.000001       if exists("b:did_indent")
                            	unlet b:did_indent
    1              0.000000       endif
                            
                                  " When there is a dot it is used to separate filetype names.  Thus for
                                  " "aaa.bbb" load "indent/aaa.vim" and then "indent/bbb.vim".
    2              0.000004       for name in split(s, '\.')
    1              0.000273         exe 'runtime! indent/' . name . '.vim'
    1              0.000246         exe 'runtime! indent/' . name . '.lua'
    2              0.000001       endfor
    1              0.000000     endif

FUNCTION  <SNR>41_try()
    Defined: ~/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/plugin/indent_blankline.vim:7
Called 44 times
Total time:   0.011303
 Self time:   0.011303

count  total (s)   self (s)
   44              0.000065     try
   44              0.011010         execute a:cmd
                                catch /E12/
                                    return
   44              0.000043     endtry

FUNCTION  25()
    Defined: /usr/local/share/nvim/runtime/autoload/provider/clipboard.vim:22
Called 5 times
Total time:   0.000091
 Self time:   0.000091

count  total (s)   self (s)
                              " At this point this nvim instance might already have launched
                              " a new provider instance. Don't drop ownership in this case.
    5              0.000024   if self.owner == a:jobid
    5              0.000013     let self.owner = 0
    5              0.000003   endif
    5              0.000005   if a:data != 0
                                echohl WarningMsg
                                echomsg 'clipboard: error invoking '.get(self.argv, 0, '?').': '.join(self.stderr)
                                echohl None
    5              0.000002   endif

FUNCTIONS SORTED ON TOTAL TIME
count  total (s)   self (s)  function
    5   0.019556   0.000197  provider#clipboard#Call()
    5   0.019359             27()
   44   0.011303             <SNR>41_try()
    1   0.003072             <SNR>1_LoadFTPlugin()
    1   0.001670             <SNR>13_SynSet()
    1   0.000539             <SNR>2_LoadIndent()
    5   0.000091             25()
    2   0.000012             <SNR>39_dopopd()

FUNCTIONS SORTED ON SELF TIME
count  total (s)   self (s)  function
    5              0.019359  27()
   44              0.011303  <SNR>41_try()
    1              0.003072  <SNR>1_LoadFTPlugin()
    1              0.001670  <SNR>13_SynSet()
    1              0.000539  <SNR>2_LoadIndent()
    5   0.019556   0.000197  provider#clipboard#Call()
    5              0.000091  25()
    2              0.000012  <SNR>39_dopopd()

